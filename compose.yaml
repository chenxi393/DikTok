# Creating network "douyin_default" with the default driver
# 首次会自动创建一个默认网络 供所有服务连接
version: '3.8'
services:
  web: 
    build: . # 会在指定目录寻找Dockerfile 构建镜像
    container_name: go_server
    ports:
      - "9999:9999"
    depends_on:
      - mysql-master
      - mysql-slave
      - redis
      - dev-rabbitmq
    #stdin_open: true # 与 docker run -i  类似 打开容器的标准输出 与用户进行交互
    #tty: true    #分配一个伪终端 与-t类似    docker run -dit
    networks:
      - shardingSphere
      - backend
    restart: on-failure:15
    environment:
      - TZ=Asia/Shanghai

  mysql-master:
    container_name: mysql-master 
    image: mysql:latest
    ports:
      - "13306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin123456
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: 'douyin'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
      MASTER_SYNC_USER: syncuser
      MASTER_SYNC_PASSWORD: sync123456
      SYNC_ALLOW_HOST: '%'
      R_W_USER: rw_user
      R_W_USER_PASSWORD: rw123456
      R_W_USER_HOST: '%'
      R_W_DATABASE: '*'
      TZ: Asia/Shanghai
    volumes:
     # 可能需要注意的是 docker-entrypoint-initdb.d 再每次重启运行 都会启动一次
      - ./config/mysql/master.sh:/docker-entrypoint-initdb.d/master.sh #这个sh会在mysql启动后自动运行
      - ./config/mysql/douyin.sql:/docker-entrypoint-initdb.d/douyin.sql 
      - ./config/mysql/master.cnf:/etc/my.cnf
      - mysqlMasterData:/var/lib/mysql/
    networks:
      shardingSphere:
        ipv4_address: 192.168.0.100

  mysql-slave:
    container_name: mysql-slave
    image: mysql:latest
    ports:
      - "13307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin123456
      MYSQL_DATABASE: 'douyin'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
      MASTER_HOST: 192.168.0.100
      MASTER_PORT: 3306
      MASTER_SYNC_USER: syncuser
      MASTER_SYNC_PASSWORD: sync123456
      R_USER: r_user
      R_USER_PASSWORD: r123456
      R_USER_HOST: '%'
      TZ: Asia/Shanghai
    volumes:
    # 这里sh和sql的执行顺序应该时按照字母序 先执行douyin.sql 再执行slave.sql
      - ./config/mysql/slave.sh:/docker-entrypoint-initdb.d/slave.sh
      - ./config/mysql/douyin.sql:/docker-entrypoint-initdb.d/douyin.sql 
      - ./config/mysql/slave.cnf:/etc/my.cnf
      - mysqlSlaveData:/var/lib/mysql/
    networks:
      shardingSphere:
        ipv4_address: 192.168.0.101
    depends_on:
      - mysql-master
  
  redis:
    image: redis:latest
    container_name: redis_douyin
    ports:
      - 6379:6379
    networks:
      - backend
    volumes:
      - redisData:/data

  dev-rabbitmq:
    image: rabbitmq:3-management
    container_name: dev-rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./config/rabbitmq/definitions.json:/opt/definitions.json:ro
      - ${PWD}/config/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - backend

networks:
  shardingSphere:
    ipam:
      driver: default
      config:
        - subnet: "192.168.0.0/24"
  backend: 

# volume 持久化数据
volumes:
  rabbitmq:
  mysqlMasterData:
  mysqlSlaveData:
  redisData:


#    env_file:
#      - .env
# 可以用evn file 保存compose里的环境变量 明文