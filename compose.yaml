services:
  frontend:
    image: chenxi393/newclip:v3.1.2
    container_name: frontend
    ports:
      - "443:443"
      - "80:80"
      - "3000:3000" # debug 端口
    networks:
      - backend
    restart: on-failure:10
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/fullchain.pem:/etc/nginx/conf.d/fullchain.pem
      - ./frontend/privkey.pem:/etc/nginx/conf.d/privkey.pem

  gateway: 
    image: chenxi393/diktok:main
    container_name: gateway
    ports:
      - "8000:8000"
    command: [/app/gateway]
    depends_on:
    # TODO 健康检查  所有的
      - video
      - mysql_slave
    #stdin_open: true # 与 docker run -i  类似 打开容器的标准输出 与用户进行交互
    #tty: true    #分配一个伪终端 与-t类似    docker run -dit
    networks:
      - backend
    restart: on-failure:10
    volumes:
      - ./config/config.yaml:/app/config/config.yaml

  video: 
    image: chenxi393/diktok:main
    container_name: video
    command: [/app/video]
    depends_on:
      - mysql_master
      - mysql_slave
      - redis
    networks:
      - mysql
      - backend
    restart: on-failure:10
    volumes:
      - ./config/config.yaml:/app/config/config.yaml

  user: 
    image: chenxi393/diktok:main
    container_name: user
    command: [/app/user]
    depends_on:
      - mysql_master
      - mysql_slave
      - redis
    networks:
      - mysql
      - backend
    restart: on-failure:10
    volumes:
      - ./config/config.yaml:/app/config/config.yaml

  relation: 
    image: chenxi393/diktok:main
    container_name: relation
    command: [/app/relation]
    depends_on:
      - mysql_master
      - mysql_slave
      - redis
      - dev_rabbitmq
    networks:
      - mysql
      - backend
    restart: on-failure:10
    volumes:
      - ./config/config.yaml:/app/config/config.yaml

  message: 
    image: chenxi393/diktok:main
    container_name: message
    command: [/app/message]
    depends_on:
      - mysql_master
      - mysql_slave
    networks:
      - mysql
      - backend
    restart: on-failure:10
    volumes:
      - ./config/config.yaml:/app/config/config.yaml

  favorite: 
    image: chenxi393/diktok:main
    container_name: favorite
    command: [/app/favorite]
    depends_on:
      - mysql_master
      - mysql_slave
      - redis
      - dev_rabbitmq
    networks:
      - mysql
      - backend
    restart: on-failure:10
    volumes:
      - ./config/config.yaml:/app/config/config.yaml

  comment: 
    image: chenxi393/diktok:main
    container_name: comment
    command: [/app/comment]
    depends_on:
      - mysql_master
      - mysql_slave
      - redis
      - dev_rabbitmq
    networks:
      - mysql
      - backend
    restart: on-failure:10
    volumes:
      - ./config/config.yaml:/app/config/config.yaml

  etcd:
    image: "quay.io/coreos/etcd:v3.5.5"
    ports:
      - "2379:2379" # 方便本机测试
    container_name: etcd
    restart: on-failure
    privileged: true
    environment:
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
      - "ALLOW_NONE_AUTHENTICATION=yes"
      - ETCD_API=3
      - ETCD_CERT_FILE="/path/to/server.crt"
      - ETCD_KEY_FILE="/path/to/server.key"
      - ETCD_AUTH="simple"
      - ETCD_AUTH_USER="diktok"
      - ETCD_AUTH_PASSWORD="diktok"
    networks:
      - backend

  mysql_master:
    container_name: mysql_master 
    image: mysql:latest
    ports:
      - "13306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin123456
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: 'diktok'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
      MASTER_SYNC_USER: syncuser
      MASTER_SYNC_PASSWORD: sync123456
      SYNC_ALLOW_HOST: '%'
      R_W_USER: rw_user
      R_W_USER_PASSWORD: rw123456
      R_W_USER_HOST: '%'
      R_W_DATABASE: '*'
      TZ: Asia/Shanghai
    volumes:
     # docker-entrypoint-initdb.d 里的文件 在构建镜像的时候会执行下面的脚本
      - ./config/mysql/master.sh:/docker-entrypoint-initdb.d/master.sh #这个sh会在mysql启动后自动运行
      - ./config/mysql/diktok.sql:/docker-entrypoint-initdb.d/diktok.sql 
      - ./config/mysql/master.cnf:/etc/my.cnf
      - mysql_master:/var/lib/mysql/
    networks:
      mysql:
        ipv4_address: 192.168.0.100

  mysql_slave:
    container_name: mysql_slave
    image: mysql:latest
    ports:
      - "13307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin123456
      MYSQL_DATABASE: 'diktok'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
      MASTER_HOST: 192.168.0.100
      MASTER_PORT: 3306
      MASTER_SYNC_USER: syncuser
      MASTER_SYNC_PASSWORD: sync123456
      R_USER: r_user
      R_USER_PASSWORD: r123456
      R_USER_HOST: '%'
      TZ: Asia/Shanghai
    volumes:
    # 这里sh和sql的执行顺序应该时按照字母序 先执行diktok.sql 再执行slave.sql
      - ./config/mysql/slave.sh:/docker-entrypoint-initdb.d/slave.sh
      - ./config/mysql/diktok.sql:/docker-entrypoint-initdb.d/diktok.sql 
      - ./config/mysql/slave.cnf:/etc/my.cnf
      - mysql_slave:/var/lib/mysql/
    networks:
      mysql:
        ipv4_address: 192.168.0.101
    depends_on:
      - mysql_master
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    networks:
      - backend
    volumes:
      - redis:/data

  dev_rabbitmq:
    image: rabbitmq:3-management
    container_name: dev_rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./config/rabbitmq/definitions.json:/opt/definitions.json:ro
      - ${PWD}/config/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - backend

  otel_collector:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./config/otel/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension

  open_observe:
    image: public.ecr.aws/zinclabs/openobserve:latest
    volumes:
      - open_observe_data:/data
    environment:
      - ZO_DATA_DIR=/data
      - ZO_ROOT_USER_EMAIL=root@example.com  # 加上引号居然不行 什么破 bug
      - ZO_ROOT_USER_PASSWORD=Complexpass#123
    ports:
      - 5080:5080  # for http
      - 5081:5081  # for grpc

networks:
  mysql:
    ipam:
      driver: default
      config:
        - subnet: "192.168.0.0/24"
  backend: 

# volume 持久化数据
volumes:
  rabbitmq:
  mysql_master:
  mysql_slave:
  redis:
  open_observe_data:

#    env_file:
#      - .env
# 可以用evn file 保存compose里的环境变量 明文