// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"diktok/storage/database/model"
)

func newCommentContent(db *gorm.DB, opts ...gen.DOOption) commentContent {
	_commentContent := commentContent{}

	_commentContent.commentContentDo.UseDB(db, opts...)
	_commentContent.commentContentDo.UseModel(&model.CommentContent{})

	tableName := _commentContent.commentContentDo.TableName()
	_commentContent.ALL = field.NewAsterisk(tableName)
	_commentContent.ID = field.NewInt64(tableName, "id")
	_commentContent.Content = field.NewString(tableName, "content")
	_commentContent.Extra = field.NewString(tableName, "extra")
	_commentContent.CreatedAt = field.NewTime(tableName, "created_at")
	_commentContent.DeletedAt = field.NewField(tableName, "deleted_at")
	_commentContent.UpdatedAt = field.NewTime(tableName, "updated_at")

	_commentContent.fillFieldMap()

	return _commentContent
}

type commentContent struct {
	commentContentDo

	ALL       field.Asterisk
	ID        field.Int64
	Content   field.String // 评论内容 后续可以考虑垂直分出去
	Extra     field.String // 回复用户 @用户[] 评论图片等
	CreatedAt field.Time
	DeletedAt field.Field
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c commentContent) Table(newTableName string) *commentContent {
	c.commentContentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commentContent) As(alias string) *commentContent {
	c.commentContentDo.DO = *(c.commentContentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commentContent) updateTableName(table string) *commentContent {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Content = field.NewString(table, "content")
	c.Extra = field.NewString(table, "extra")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *commentContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commentContent) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["content"] = c.Content
	c.fieldMap["extra"] = c.Extra
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c commentContent) clone(db *gorm.DB) commentContent {
	c.commentContentDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commentContent) replaceDB(db *gorm.DB) commentContent {
	c.commentContentDo.ReplaceDB(db)
	return c
}

type commentContentDo struct{ gen.DO }

type ICommentContentDo interface {
	gen.SubQuery
	Debug() ICommentContentDo
	WithContext(ctx context.Context) ICommentContentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommentContentDo
	WriteDB() ICommentContentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommentContentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommentContentDo
	Not(conds ...gen.Condition) ICommentContentDo
	Or(conds ...gen.Condition) ICommentContentDo
	Select(conds ...field.Expr) ICommentContentDo
	Where(conds ...gen.Condition) ICommentContentDo
	Order(conds ...field.Expr) ICommentContentDo
	Distinct(cols ...field.Expr) ICommentContentDo
	Omit(cols ...field.Expr) ICommentContentDo
	Join(table schema.Tabler, on ...field.Expr) ICommentContentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommentContentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommentContentDo
	Group(cols ...field.Expr) ICommentContentDo
	Having(conds ...gen.Condition) ICommentContentDo
	Limit(limit int) ICommentContentDo
	Offset(offset int) ICommentContentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentContentDo
	Unscoped() ICommentContentDo
	Create(values ...*model.CommentContent) error
	CreateInBatches(values []*model.CommentContent, batchSize int) error
	Save(values ...*model.CommentContent) error
	First() (*model.CommentContent, error)
	Take() (*model.CommentContent, error)
	Last() (*model.CommentContent, error)
	Find() ([]*model.CommentContent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentContent, err error)
	FindInBatches(result *[]*model.CommentContent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommentContent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommentContentDo
	Assign(attrs ...field.AssignExpr) ICommentContentDo
	Joins(fields ...field.RelationField) ICommentContentDo
	Preload(fields ...field.RelationField) ICommentContentDo
	FirstOrInit() (*model.CommentContent, error)
	FirstOrCreate() (*model.CommentContent, error)
	FindByPage(offset int, limit int) (result []*model.CommentContent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommentContentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c commentContentDo) Debug() ICommentContentDo {
	return c.withDO(c.DO.Debug())
}

func (c commentContentDo) WithContext(ctx context.Context) ICommentContentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commentContentDo) ReadDB() ICommentContentDo {
	return c.Clauses(dbresolver.Read)
}

func (c commentContentDo) WriteDB() ICommentContentDo {
	return c.Clauses(dbresolver.Write)
}

func (c commentContentDo) Session(config *gorm.Session) ICommentContentDo {
	return c.withDO(c.DO.Session(config))
}

func (c commentContentDo) Clauses(conds ...clause.Expression) ICommentContentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commentContentDo) Returning(value interface{}, columns ...string) ICommentContentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commentContentDo) Not(conds ...gen.Condition) ICommentContentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commentContentDo) Or(conds ...gen.Condition) ICommentContentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commentContentDo) Select(conds ...field.Expr) ICommentContentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commentContentDo) Where(conds ...gen.Condition) ICommentContentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commentContentDo) Order(conds ...field.Expr) ICommentContentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commentContentDo) Distinct(cols ...field.Expr) ICommentContentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commentContentDo) Omit(cols ...field.Expr) ICommentContentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commentContentDo) Join(table schema.Tabler, on ...field.Expr) ICommentContentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commentContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommentContentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commentContentDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommentContentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commentContentDo) Group(cols ...field.Expr) ICommentContentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commentContentDo) Having(conds ...gen.Condition) ICommentContentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commentContentDo) Limit(limit int) ICommentContentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commentContentDo) Offset(offset int) ICommentContentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commentContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentContentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commentContentDo) Unscoped() ICommentContentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commentContentDo) Create(values ...*model.CommentContent) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commentContentDo) CreateInBatches(values []*model.CommentContent, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commentContentDo) Save(values ...*model.CommentContent) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commentContentDo) First() (*model.CommentContent, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) Take() (*model.CommentContent, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) Last() (*model.CommentContent, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) Find() ([]*model.CommentContent, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommentContent), err
}

func (c commentContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentContent, err error) {
	buf := make([]*model.CommentContent, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commentContentDo) FindInBatches(result *[]*model.CommentContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commentContentDo) Attrs(attrs ...field.AssignExpr) ICommentContentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commentContentDo) Assign(attrs ...field.AssignExpr) ICommentContentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commentContentDo) Joins(fields ...field.RelationField) ICommentContentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commentContentDo) Preload(fields ...field.RelationField) ICommentContentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commentContentDo) FirstOrInit() (*model.CommentContent, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) FirstOrCreate() (*model.CommentContent, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentContent), nil
	}
}

func (c commentContentDo) FindByPage(offset int, limit int) (result []*model.CommentContent, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commentContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commentContentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commentContentDo) Delete(models ...*model.CommentContent) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commentContentDo) withDO(do gen.Dao) *commentContentDo {
	c.DO = *do.(*gen.DO)
	return c
}
