// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"diktok/storage/database/model"
)

func newCommentMetum(db *gorm.DB, opts ...gen.DOOption) commentMetum {
	_commentMetum := commentMetum{}

	_commentMetum.commentMetumDo.UseDB(db, opts...)
	_commentMetum.commentMetumDo.UseModel(&model.CommentMetum{})

	tableName := _commentMetum.commentMetumDo.TableName()
	_commentMetum.ALL = field.NewAsterisk(tableName)
	_commentMetum.ID = field.NewInt64(tableName, "id")
	_commentMetum.CommentID = field.NewInt64(tableName, "comment_id")
	_commentMetum.ItemID = field.NewInt64(tableName, "item_id")
	_commentMetum.ParentID = field.NewInt64(tableName, "parent_id")
	_commentMetum.UserID = field.NewInt64(tableName, "user_id")
	_commentMetum.Status = field.NewInt32(tableName, "status")
	_commentMetum.DeletedAt = field.NewField(tableName, "deleted_at")
	_commentMetum.CreatedAt = field.NewTime(tableName, "created_at")
	_commentMetum.UpdatedAt = field.NewTime(tableName, "updated_at")

	_commentMetum.fillFieldMap()

	return _commentMetum
}

type commentMetum struct {
	commentMetumDo

	ALL       field.Asterisk
	ID        field.Int64
	CommentID field.Int64 // 评论ID
	ItemID    field.Int64 // 视频ID，文章ID等 抽象的物品item id
	ParentID  field.Int64 // 0:根评论 非0:子评论
	UserID    field.Int64 // 评论的用户ID
	Status    field.Int32 // 1:全都可见 2:已删除 3:置顶 4:审核不通过 。。。
	DeletedAt field.Field
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c commentMetum) Table(newTableName string) *commentMetum {
	c.commentMetumDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commentMetum) As(alias string) *commentMetum {
	c.commentMetumDo.DO = *(c.commentMetumDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commentMetum) updateTableName(table string) *commentMetum {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CommentID = field.NewInt64(table, "comment_id")
	c.ItemID = field.NewInt64(table, "item_id")
	c.ParentID = field.NewInt64(table, "parent_id")
	c.UserID = field.NewInt64(table, "user_id")
	c.Status = field.NewInt32(table, "status")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *commentMetum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commentMetum) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["comment_id"] = c.CommentID
	c.fieldMap["item_id"] = c.ItemID
	c.fieldMap["parent_id"] = c.ParentID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["status"] = c.Status
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c commentMetum) clone(db *gorm.DB) commentMetum {
	c.commentMetumDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commentMetum) replaceDB(db *gorm.DB) commentMetum {
	c.commentMetumDo.ReplaceDB(db)
	return c
}

type commentMetumDo struct{ gen.DO }

type ICommentMetumDo interface {
	gen.SubQuery
	Debug() ICommentMetumDo
	WithContext(ctx context.Context) ICommentMetumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommentMetumDo
	WriteDB() ICommentMetumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommentMetumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommentMetumDo
	Not(conds ...gen.Condition) ICommentMetumDo
	Or(conds ...gen.Condition) ICommentMetumDo
	Select(conds ...field.Expr) ICommentMetumDo
	Where(conds ...gen.Condition) ICommentMetumDo
	Order(conds ...field.Expr) ICommentMetumDo
	Distinct(cols ...field.Expr) ICommentMetumDo
	Omit(cols ...field.Expr) ICommentMetumDo
	Join(table schema.Tabler, on ...field.Expr) ICommentMetumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommentMetumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommentMetumDo
	Group(cols ...field.Expr) ICommentMetumDo
	Having(conds ...gen.Condition) ICommentMetumDo
	Limit(limit int) ICommentMetumDo
	Offset(offset int) ICommentMetumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentMetumDo
	Unscoped() ICommentMetumDo
	Create(values ...*model.CommentMetum) error
	CreateInBatches(values []*model.CommentMetum, batchSize int) error
	Save(values ...*model.CommentMetum) error
	First() (*model.CommentMetum, error)
	Take() (*model.CommentMetum, error)
	Last() (*model.CommentMetum, error)
	Find() ([]*model.CommentMetum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentMetum, err error)
	FindInBatches(result *[]*model.CommentMetum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CommentMetum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommentMetumDo
	Assign(attrs ...field.AssignExpr) ICommentMetumDo
	Joins(fields ...field.RelationField) ICommentMetumDo
	Preload(fields ...field.RelationField) ICommentMetumDo
	FirstOrInit() (*model.CommentMetum, error)
	FirstOrCreate() (*model.CommentMetum, error)
	FindByPage(offset int, limit int) (result []*model.CommentMetum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommentMetumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c commentMetumDo) Debug() ICommentMetumDo {
	return c.withDO(c.DO.Debug())
}

func (c commentMetumDo) WithContext(ctx context.Context) ICommentMetumDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commentMetumDo) ReadDB() ICommentMetumDo {
	return c.Clauses(dbresolver.Read)
}

func (c commentMetumDo) WriteDB() ICommentMetumDo {
	return c.Clauses(dbresolver.Write)
}

func (c commentMetumDo) Session(config *gorm.Session) ICommentMetumDo {
	return c.withDO(c.DO.Session(config))
}

func (c commentMetumDo) Clauses(conds ...clause.Expression) ICommentMetumDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commentMetumDo) Returning(value interface{}, columns ...string) ICommentMetumDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commentMetumDo) Not(conds ...gen.Condition) ICommentMetumDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commentMetumDo) Or(conds ...gen.Condition) ICommentMetumDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commentMetumDo) Select(conds ...field.Expr) ICommentMetumDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commentMetumDo) Where(conds ...gen.Condition) ICommentMetumDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commentMetumDo) Order(conds ...field.Expr) ICommentMetumDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commentMetumDo) Distinct(cols ...field.Expr) ICommentMetumDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commentMetumDo) Omit(cols ...field.Expr) ICommentMetumDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commentMetumDo) Join(table schema.Tabler, on ...field.Expr) ICommentMetumDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commentMetumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommentMetumDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commentMetumDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommentMetumDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commentMetumDo) Group(cols ...field.Expr) ICommentMetumDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commentMetumDo) Having(conds ...gen.Condition) ICommentMetumDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commentMetumDo) Limit(limit int) ICommentMetumDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commentMetumDo) Offset(offset int) ICommentMetumDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commentMetumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommentMetumDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commentMetumDo) Unscoped() ICommentMetumDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commentMetumDo) Create(values ...*model.CommentMetum) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commentMetumDo) CreateInBatches(values []*model.CommentMetum, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commentMetumDo) Save(values ...*model.CommentMetum) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commentMetumDo) First() (*model.CommentMetum, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentMetum), nil
	}
}

func (c commentMetumDo) Take() (*model.CommentMetum, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentMetum), nil
	}
}

func (c commentMetumDo) Last() (*model.CommentMetum, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentMetum), nil
	}
}

func (c commentMetumDo) Find() ([]*model.CommentMetum, error) {
	result, err := c.DO.Find()
	return result.([]*model.CommentMetum), err
}

func (c commentMetumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CommentMetum, err error) {
	buf := make([]*model.CommentMetum, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commentMetumDo) FindInBatches(result *[]*model.CommentMetum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commentMetumDo) Attrs(attrs ...field.AssignExpr) ICommentMetumDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commentMetumDo) Assign(attrs ...field.AssignExpr) ICommentMetumDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commentMetumDo) Joins(fields ...field.RelationField) ICommentMetumDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commentMetumDo) Preload(fields ...field.RelationField) ICommentMetumDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commentMetumDo) FirstOrInit() (*model.CommentMetum, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentMetum), nil
	}
}

func (c commentMetumDo) FirstOrCreate() (*model.CommentMetum, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CommentMetum), nil
	}
}

func (c commentMetumDo) FindByPage(offset int, limit int) (result []*model.CommentMetum, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commentMetumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commentMetumDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commentMetumDo) Delete(models ...*model.CommentMetum) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commentMetumDo) withDO(do gen.Dao) *commentMetumDo {
	c.DO = *do.(*gen.DO)
	return c
}
